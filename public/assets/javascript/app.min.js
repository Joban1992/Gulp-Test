console.log("abc");var sessionService={},userInfo=null;sessionService.getUserInfo=function(){return userInfo||(userInfo=JSON.parse(localStorage.getItem("user"))),userInfo},sessionService.getUserInfoWithKey=function(e){var r=sessionService.getUserInfo();if(r[e])return r[e]},sessionService.saveUserInfo=function(e){localStorage.setItem("user",JSON.stringify(e))},sessionService.deleteSession=function(){userInfo=null,localStorage.clear()},sessionService.getSessionId=function(){return localStorage.getItem("sessionId")},sessionService.setSessionId=function(e){localStorage.setItem("sessionId",e)},sessionService.checkUserSession=function(){var e=sessionService.getUserInfo(),r="",t=r.substring(r.lastIndexOf("/")+1,r.lenght);if(e){if("signin"===t||"signup"===t||"forgotpassword"===t){var o=sessionService.getUserInfoWithKey("role");"admin"===o.toLowerCase()}return!0}return"signin"!==t&&"signup"!==t&&"forgotpassword"!==t&&StateChanger.goTo("signin",{q:"LogoutA"}),!1},function(){"use strict";angular.module("app",[]).factory("CoreHierarchy",["$http","$sce","ServerConfig","LoaderService",function(e,r,t,o){var n=t.serverConfig,s=n.localPath;return{getData:function(){o.showLoader();var r=e.get(s+"CoreHierarchy").success(function(e){return o.hideLoader(),e.data}).error(function(e){o.hideLoader()});return r},putData:function(r,t){o.showLoader();var n=e.put(s+t,r).success(function(e){o.hideLoader()}).error(function(e){return o.hideLoader(),{status:"data get request failed",code:"404"}});return n},postData:function(r,t){o.showLoader();var n=e.post(s+t,r).success(function(e){return o.hideLoader(),e.data}).error(function(e){return o.hideLoader(),{status:"data get request failed",code:"404"}});return n},getRegion:function(){o.showLoader();var r=e.get(s+"region").success(function(e){return o.hideLoader(),e.data}).error(function(e){return o.hideLoader(),{status:"data get request failed",code:"404"}});return r},getReportType:function(r){o.showLoader();var t=e.get(s+"/reportType/region/"+r).success(function(e){return o.hideLoader(),e.data}).error(function(e){return o.hideLoader(),{status:"data get request failed",code:"404"}});return t},getPortfolio:function(r){o.showLoader();var t=e.get(s+"portfolio/reportType/"+r).success(function(e){return o.hideLoader(),e.data}).error(function(e){return o.hideLoader(),{status:"data get request failed",code:"404"}});return t},getComponent:function(){o.showLoader();var r=e.get(s+"CoreHierarchy").success(function(e){return o.hideLoader(),e.data}).error(function(e){return o.hideLoader(),{status:"data get request failed",code:"404"}});return r}}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
